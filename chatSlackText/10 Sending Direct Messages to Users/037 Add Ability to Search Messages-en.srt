1
00:00:00,900 --> 00:00:05,130
Nelse the ability to search messages for a given channel where you can type into the search and put

2
00:00:05,470 --> 00:00:12,090
get returned to us all the messages that match what we typed in so on our input and our messages had

3
00:00:12,090 --> 00:00:16,780
her live and onchange and connected to a function.

4
00:00:16,810 --> 00:00:21,990
Now the function that we were connected to will be within our messages component and so we want to update

5
00:00:22,020 --> 00:00:28,670
the state here that this function will be called Hindol search change.

6
00:00:28,780 --> 00:00:39,300
We will take the event from the Change event and at set the state set the property on state called search

7
00:00:39,300 --> 00:00:45,750
term according to that either is typed in with event of target value we need to create a search term

8
00:00:45,750 --> 00:00:54,110
within our messages state will also create a property called Search loading which will initially be

9
00:00:54,110 --> 00:00:55,150
set to false.

10
00:00:55,160 --> 00:00:59,660
They also want to track when this search operation is being performed with search loading.

11
00:00:59,660 --> 00:01:05,300
So when were setting the state or setting the value of our search term that search loading to true

12
00:01:08,480 --> 00:01:13,290
then we need to pass down the function to our messages header.

13
00:01:14,360 --> 00:01:16,290
Or pass it as the prop Hindle search change

14
00:01:20,940 --> 00:01:23,520
then within messages header will grab it from our prop's

15
00:01:27,930 --> 00:01:30,920
and attach it to our onchange.

16
00:01:30,940 --> 00:01:38,770
So now when we type into the input or updating the state the messages stay but now we need to filter

17
00:01:38,950 --> 00:01:47,780
the messages that we have within our messages state to add a callback function when our search term

18
00:01:47,780 --> 00:01:52,790
is updated upon calling said state will execute a function called handle search messages which will

19
00:01:52,820 --> 00:01:55,150
do that filtering operation for us.

20
00:01:55,870 --> 00:01:58,840
So create this function right underneath the handle search change.

21
00:01:59,500 --> 00:02:05,320
The first thing we need to do is copy the message to the array that we have in state using the spread

22
00:02:05,320 --> 00:02:11,740
operator will spread all the values of just RC dot messages and assign it to an array called channel

23
00:02:11,740 --> 00:02:17,380
messages to make sure that we dont mutate the original messages or they will create a Redjacket using

24
00:02:17,380 --> 00:02:19,350
the regexp constructor.

25
00:02:19,590 --> 00:02:26,910
We do that first by providing a pattern which will set with dynamically with the search term value from

26
00:02:26,910 --> 00:02:30,090
the start date search term and then will provide a flag.

27
00:02:30,270 --> 00:02:38,160
And this will indicate that we want our red X to be applied globally and case insensitively so to the

28
00:02:38,160 --> 00:02:44,370
entire string that we're matching with the Red X as well as making sure that the case of the text doesn't

29
00:02:44,370 --> 00:02:51,120
matter or create a search results or they will take general messages use Reduce to go through the entire

30
00:02:51,120 --> 00:02:53,130
channel messages re.

31
00:02:53,220 --> 00:02:56,630
And we'll have our accumulator initially set to an empty array.

32
00:02:58,330 --> 00:03:00,880
And each of the values that we iterate over will be called message

33
00:03:03,630 --> 00:03:05,190
and to add new values to.

34
00:03:05,390 --> 00:03:14,330
We'll check to see if message content got match we'll use the match method to apply a red X to the content

35
00:03:14,330 --> 00:03:15,710
of the message.

36
00:03:15,710 --> 00:03:21,430
If we have a match with our rejects on the content of the message we will push the entire message onto

37
00:03:21,440 --> 00:03:24,820
our accumulator on to our array.

38
00:03:25,910 --> 00:03:31,070
Now it's possible that our message might include an image instead of a content property so we need to

39
00:03:31,070 --> 00:03:37,730
first check that a given message has the content property and if that's the case at the very end of

40
00:03:37,790 --> 00:03:46,270
reduce we'll return the accumulator then once we have our search results we'll set the state or set

41
00:03:46,540 --> 00:03:50,190
a search results property on state.

42
00:03:50,610 --> 00:03:51,460
So create that

43
00:03:55,180 --> 00:03:57,480
will make search results an empty array.

44
00:04:02,120 --> 00:04:10,740
And now in a return we need to set up a conditional a ternary to check to see that we have a search

45
00:04:10,740 --> 00:04:14,790
term we'll check to see if we have a search term.

46
00:04:14,790 --> 00:04:19,880
If so we're going to use display messages and pass it the search results array.

47
00:04:20,430 --> 00:04:24,300
Otherwise we'll execute display messages.

48
00:04:24,360 --> 00:04:27,160
Just passing the entire messages or a

49
00:04:30,200 --> 00:04:36,220
structure both search term and search results.

50
00:04:37,780 --> 00:04:42,500
Are this ternary.

51
00:04:42,610 --> 00:04:48,270
Now we can say both files and test this out in our search.

52
00:04:48,440 --> 00:04:55,120
We type in the letter H and C we're matching all of the messages that contain letter H I can type in

53
00:04:55,120 --> 00:04:55,700
high.

54
00:04:55,720 --> 00:05:02,030
Now I only get the messages with the text high and if I type in a capital H we get the same matches.

55
00:05:02,030 --> 00:05:10,100
So again this regexp is being applied is case insensitive and it's matching the entire content string

56
00:05:10,670 --> 00:05:15,800
but we can't search for users we can't search for the messages that an individual user has created.

57
00:05:15,800 --> 00:05:25,760
So to add that ability go back to your handle search messages function and add this or conditional to

58
00:05:25,760 --> 00:05:36,650
apply our rejects to message user name or apply that to the name of the user that created a given message.

59
00:05:37,500 --> 00:05:44,300
So if we save that now I can search for a user like Bethanie and get all that all that users messages

60
00:05:44,540 --> 00:05:51,190
or Thomas can see we're getting all of their messaging messages including their image messages.

61
00:05:58,040 --> 00:06:05,320
And one additional thing we can add just as a small UI feature is our search loading property from state.

62
00:06:05,480 --> 00:06:10,810
If you recall we're setting search loading to true when this search operation is taking place.

63
00:06:10,980 --> 00:06:20,350
Passed down search loading as a prop to messages header and receive it first by structuring it from

64
00:06:20,590 --> 00:06:29,200
the proxy object then put it on our input component as this loading Propp.

65
00:06:29,250 --> 00:06:37,960
So when that said to true we'll have this little loading icon be a nice indication of our loading our

66
00:06:37,960 --> 00:06:39,880
search operation taking place.

67
00:06:39,880 --> 00:06:46,620
So back within our handle search messages after setting the search results are all set search loading

68
00:06:46,620 --> 00:06:54,710
the false and we'll do this after a period of maybe one second.

69
00:06:54,910 --> 00:07:01,760
So use a set time out and pass a value of 1000 milliseconds to it.

70
00:07:02,760 --> 00:07:10,260
So now when we type into our search we get this little learning animation on the right hand side

71
00:07:13,130 --> 00:07:18,700
just a nice little indication to show our users what's taking place when they type into it.

