1
00:00:00,730 --> 00:00:05,210
Now it's display the users that we can send direct messages to and our direct messages component

2
00:00:07,820 --> 00:00:09,800
to direct messages.

3
00:00:11,280 --> 00:00:18,560
The first thing we need here is the current user data that you'll get from the parent component the

4
00:00:18,570 --> 00:00:25,830
side panels or pass current user down as a prompt to direct messages.

5
00:00:25,890 --> 00:00:29,710
Once we have the current user data we'll put it in our state as the user property

6
00:00:34,600 --> 00:00:42,470
when our component mounts we're going to check to see that we have some user data that it's NOT KNOW.

7
00:00:42,830 --> 00:00:51,440
If so we'll call a function called add listeners and pass the user id to it to create this add listeners

8
00:00:51,440 --> 00:01:02,140
function which takes the current user ID and is going to collect all of the users that aren't currently

9
00:01:02,140 --> 00:01:09,210
authorized authenticated user or first import firebase from firebase.

10
00:01:09,220 --> 00:01:17,600
Now the users are up to date.

11
00:01:17,870 --> 00:01:28,750
First create an empty array called Loaded users will take the user's wrath and most incur any new children

12
00:01:29,140 --> 00:01:32,890
that are added and within the snap callback

13
00:01:35,780 --> 00:01:40,570
will check to see that the current user ID is not equal to snapshot.

14
00:01:41,920 --> 00:01:48,640
This is because we don't want to include within our loaded users or ourselves the currently authenticated

15
00:01:48,640 --> 00:01:54,550
user or create a user variable be equal to the value of this snap.

16
00:01:54,920 --> 00:02:01,600
Well I had a couple of properties the first being the id property to be equal to snapshot key and the

17
00:02:01,600 --> 00:02:09,900
status of the user which will initially be set to offline then will take each of these user objects

18
00:02:10,070 --> 00:02:11,840
push it onto the loaded user's array.

19
00:02:13,970 --> 00:02:23,970
Then put it within local state said state onto the user's property.

20
00:02:24,020 --> 00:02:26,870
Then underneath our users Raffl this connected router.

21
00:02:27,020 --> 00:02:32,450
This is a wrap which will give us information about the user's status.

22
00:02:33,400 --> 00:02:35,100
As to whether they are connected or not.

23
00:02:38,310 --> 00:02:44,670
And all users connected with which gives us some better information about each user in our app.

24
00:02:45,970 --> 00:02:49,830
To listen for a change in the value.

25
00:02:50,200 --> 00:02:58,200
So if there's a value change for a given user with the connected we're going to update a new collection

26
00:02:58,200 --> 00:03:05,590
that we'll create in our database called presence and presence will consist of an array of user IDs.

27
00:03:07,570 --> 00:03:10,070
And a value of true.

28
00:03:10,180 --> 00:03:17,610
So this Namen value pair that users you you ID in there and the value true will be set.

29
00:03:17,620 --> 00:03:26,330
Only if the user is online to indicate their presence within the app or this is how we'll track the

30
00:03:26,330 --> 00:03:30,080
users online status as well as their off line status.

31
00:03:35,800 --> 00:03:44,930
So if it's now equals true it there is a value change for a given user on the connected drop first ad

32
00:03:44,930 --> 00:03:51,420
the present practice date referencing firebase the database ref with the string of preference.

33
00:03:53,540 --> 00:03:54,760
We're going to take the presence for

34
00:03:58,710 --> 00:04:09,100
no added child to it with the current user you ID will call this value graph and set it to true.

35
00:04:09,250 --> 00:04:10,980
Set the value of that to true.

36
00:04:11,220 --> 00:04:14,200
And I'll also add this disconnect method.

37
00:04:14,730 --> 00:04:21,990
In the case that if our user disconnects from the app will remove it with the Remove method and catch

38
00:04:21,990 --> 00:04:24,030
any errors in the process.

39
00:04:30,330 --> 00:04:36,590
So now that we're tracking the users online status with the presence raw underneath we'll take it and

40
00:04:36,590 --> 00:04:38,600
listen for the child added event.

41
00:04:38,780 --> 00:04:49,300
So if there is a new child added a new user is added to our presence or as the value of true and you

42
00:04:49,680 --> 00:04:52,120
I.D. is not equal to snapshot.

43
00:04:52,230 --> 00:04:58,680
Once again are you going to add a status to the user.

44
00:04:59,220 --> 00:05:07,000
And we do that with a function of first copy this and paste it in right underneath and listen for the

45
00:05:07,060 --> 00:05:10,280
child removed event.

46
00:05:12,320 --> 00:05:16,940
You want to listen for when a child is added and a child is removed to the presence rack and or create

47
00:05:16,940 --> 00:05:20,410
or add status to user function.

48
00:05:20,420 --> 00:05:25,070
This will take a user ID and a connected value which by default would be set to true

49
00:05:27,940 --> 00:05:30,220
will create a variable called updated users.

50
00:05:32,250 --> 00:05:40,950
I will go through the users array with the reduce method which has an accumulator and iterate over each

51
00:05:40,950 --> 00:05:41,900
user value.

52
00:05:45,760 --> 00:05:51,050
And I'll check to see if the user ID is equal to user ID.

53
00:05:54,560 --> 00:06:02,870
As well as if a connected value connected is passed a value of true.

54
00:06:03,010 --> 00:06:12,970
If so going to put the status of the user as online if not would make them online then we'll concatenate

55
00:06:13,630 --> 00:06:22,110
each user back onto the accumulator and then set the date or set the users array with the updated users

56
00:06:22,260 --> 00:06:22,770
array.

57
00:06:26,470 --> 00:06:31,970
Then with them the child added again this conditional that we set up where when a child is added to

58
00:06:31,970 --> 00:06:39,650
the presenter will execute as services or and passed the snapped key.

59
00:06:40,440 --> 00:06:47,190
And when a child is removed we'll set the connected argument to false indicating that our users are

60
00:06:47,190 --> 00:06:51,080
not connected and that we should give them a status of off line.

61
00:06:51,210 --> 00:07:01,700
And finally within our menu will iterate over the users map over them and all the user data will be

62
00:07:01,700 --> 00:07:03,850
within a menu item component.

63
00:07:03,850 --> 00:07:12,970
The key will be user got you I.D. serpent Arncliffe or chronologies console log the user data set the

64
00:07:12,970 --> 00:07:18,970
style of the menu item its opacity to 0.7 and the font size to a taluk

65
00:07:22,780 --> 00:07:25,450
and within the menu item will have an icon

66
00:07:28,490 --> 00:07:33,860
the name of circle and the circle will show the status of the user whether they're online or offline

67
00:07:34,250 --> 00:07:44,820
with a color or the color will execute this function is user online will run its user online and if

68
00:07:44,820 --> 00:07:47,690
it returns true will give the iconic color green.

69
00:07:47,700 --> 00:07:52,750
Otherwise a color of red I indicate that there are online.

70
00:07:52,800 --> 00:08:00,050
So is yours or online will take the user will check the user status to see if it's the text online.

71
00:08:00,270 --> 00:08:09,950
If it's true once again or have a color of green then underneath the icon will just interpolate the

72
00:08:10,600 --> 00:08:16,280
user name with user name.

73
00:08:16,300 --> 00:08:23,380
Now if we head back to our app and we refresh our direct messages we should see another use in our app

74
00:08:23,440 --> 00:08:24,670
that's not ourselves.

75
00:08:24,670 --> 00:08:27,780
Or we can send direct messages to and on our present track.

76
00:08:27,820 --> 00:08:33,550
We should see one value of true which is us the currently authenticated user.

