1
00:00:01,020 --> 00:00:04,500
We have our first channel added to our channels collection.

2
00:00:04,500 --> 00:00:10,250
Now we want to get all of the channel data all the channels that users have added within our channels

3
00:00:10,260 --> 00:00:12,700
component.

4
00:00:12,740 --> 00:00:21,410
We'll do that by creating the component of Mt lifecycle method and putting within its a function called

5
00:00:21,410 --> 00:00:22,270
Ad lessness.

6
00:00:22,310 --> 00:00:30,680
So execute ad listeners when the component mounts and the ad listeners will first take an array and

7
00:00:30,850 --> 00:00:33,580
them T-Ray called Loaded channels.

8
00:00:33,720 --> 00:00:39,530
That's going to out a listener going to listen for each new child added to the channels.

9
00:00:39,610 --> 00:00:49,400
RATH will take children from state use the on method and MUSSEN for every new child added were able

10
00:00:49,400 --> 00:00:56,090
to get information about each child with the snap callback and will push the value of each.

11
00:00:56,090 --> 00:01:00,380
Now onto the loaded channels array.

12
00:01:00,490 --> 00:01:08,500
And for now we'll log loaded channels when all of those values are pushed onto the tray.

13
00:01:08,710 --> 00:01:13,880
See what it looks like back in our app will reload the page.

14
00:01:13,900 --> 00:01:15,340
Take a look at our console.

15
00:01:16,030 --> 00:01:18,650
You'll see that we have only one value in this array.

16
00:01:18,660 --> 00:01:24,010
For now our one channel if we add the new channel

17
00:01:27,140 --> 00:01:33,710
and click on and can see we immediately get information about that new child that was added but new

18
00:01:33,710 --> 00:01:42,260
piece of data that was added to our channels raw or move the log and instead set the state onto set

19
00:01:42,290 --> 00:01:46,310
the channels part of data channels program state to loaded channels

20
00:01:50,130 --> 00:01:56,940
then down at the bottom at the closing tag of our menu component.

21
00:01:56,970 --> 00:02:03,910
Once you iterate over the channels that were getting with a function called display channels and all

22
00:02:03,910 --> 00:02:10,820
the structured channels from state within our render and display channels.

23
00:02:11,230 --> 00:02:15,790
Take all the channels that we have in state and check to make sure that the length of it is greater

24
00:02:15,790 --> 00:02:18,280
than zero to ensure that we actually have some.

25
00:02:18,640 --> 00:02:25,360
And if that's the case we're going to map over those channels and we'll call each element channel

26
00:02:28,450 --> 00:02:35,740
and put them within a menu item the channel data that we're getting in on this menu item will set a

27
00:02:35,740 --> 00:02:43,720
key or iterating over to channel ID and click which for now just be an inline arrow function where we'll

28
00:02:43,750 --> 00:02:45,450
log all the channel data

29
00:02:48,860 --> 00:02:59,690
and give it a name that to channel that name and the style with the opacity set to 0.7

30
00:03:02,170 --> 00:03:07,980
within the menu item then the tags give it a hash mark and then interpolate the channel name of channel

31
00:03:07,990 --> 00:03:09,910
the name will say that

32
00:03:13,010 --> 00:03:17,630
take a look in our browser and we can see how our two channels are appearing here and when we click

33
00:03:17,630 --> 00:03:20,960
on them we get all of the related channel data.

