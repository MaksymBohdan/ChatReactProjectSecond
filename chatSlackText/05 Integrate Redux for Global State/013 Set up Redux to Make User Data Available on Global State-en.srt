1
00:00:00,360 --> 00:00:06,420
Now that you've got the state changes listen or set up for authenticated we're always redirected back

2
00:00:06,420 --> 00:00:09,740
to the app component which is where our chat will live.

3
00:00:11,720 --> 00:00:17,840
If we log this user value that we have access to within our state changed and we take a look at our

4
00:00:17,840 --> 00:00:24,440
console we can see that it's an object which includes all of our user information for currently authenticated

5
00:00:24,440 --> 00:00:24,830
user

6
00:00:28,460 --> 00:00:30,330
and in developing the chat portion of our app.

7
00:00:30,380 --> 00:00:35,600
We're going to be creating a lot of components many of which are going to need to access this user data.

8
00:00:35,600 --> 00:00:41,390
It'd be nice if we could execute a function the name for example of set user repassing the user data

9
00:00:41,480 --> 00:00:44,210
and put all of that data on global state.

10
00:00:44,210 --> 00:00:51,230
So any of our Riak components that want to make use of it can to do this will set up the state management

11
00:00:51,230 --> 00:00:56,280
system redux within Exxon objects and or import a few packages to set that up.

12
00:00:56,510 --> 00:01:04,160
One port the function creates store from Rydex we import the provider component from reactor docs as

13
00:01:04,280 --> 00:01:16,230
well as the function composable dev tools in order to set up our redux dev tools extension.

14
00:01:16,440 --> 00:01:25,270
Now to create our global say all we need to do is create a store variable and this will store the return

15
00:01:25,270 --> 00:01:31,690
value from executing we create store function into that we just need to pass an empty function.

16
00:01:31,690 --> 00:01:37,410
For now as well as composite dev tools and make sure to execute that function

17
00:01:40,170 --> 00:01:46,830
to provide this global state this global store to all of our components we'll use the provider component

18
00:01:47,100 --> 00:01:53,400
or wrap our router with it provider will provide our global state to any component that wants to use

19
00:01:53,400 --> 00:02:00,430
it and will pass it down using the store proc will pass the store variable to it.

20
00:02:03,280 --> 00:02:08,020
Now what we've set that up we take a look at our browser we can see our dev tools.

21
00:02:08,100 --> 00:02:10,220
For redox is now going green.

22
00:02:10,390 --> 00:02:17,350
We go to the redux dev tools extension within our console can see this interface which will use in order

23
00:02:17,350 --> 00:02:19,310
to interact with our global state.

24
00:02:19,480 --> 00:02:25,540
And currently it's empty because we haven't set up our state any of the properties on state or any of

25
00:02:25,540 --> 00:02:28,540
the actions I will be using to interact with state.

26
00:02:28,690 --> 00:02:35,530
We'll begin by creating an actions folder within our source folder and this will contain two files an

27
00:02:35,530 --> 00:02:41,920
index file as well as a type's file and action types will be responsible for determining what type of

28
00:02:41,920 --> 00:02:48,610
change we want to make to our global state within our types file we'll create our first type to be a

29
00:02:48,610 --> 00:02:53,750
variable called set user equal to the string of the same name set user.

30
00:02:53,890 --> 00:02:56,140
We'll put this as a variable and export it.

31
00:02:56,140 --> 00:03:01,580
Since we're going to be using it in a number of files in the first place we'll use it is in this index

32
00:03:02,020 --> 00:03:07,930
file that we created in our actions folder will import all of the exports all of the exported types

33
00:03:07,930 --> 00:03:15,890
from our types file as an object called action types then we'll create our first action which will have

34
00:03:15,890 --> 00:03:24,410
the same name set user but written in the camel case syntax and to this function will pass in the user

35
00:03:24,410 --> 00:03:28,610
data that we'll be getting and from our action we want to return two things.

36
00:03:28,610 --> 00:03:36,740
First of all the type and the type or turn is the type that we just created the set user type on or

37
00:03:36,740 --> 00:03:38,000
action type object.

38
00:03:38,090 --> 00:03:39,530
And then a payload.

39
00:03:39,530 --> 00:03:46,390
So actions also be responsible for passing the data that our state needs to be changed with.

40
00:03:46,400 --> 00:03:53,030
So on our payload object will have one property of current user set to the user data that's passed into

41
00:03:53,030 --> 00:03:53,580
it.

42
00:03:56,070 --> 00:04:03,810
Now in order to actually perform the change to state of setting the user are going to create functions

43
00:04:03,810 --> 00:04:09,030
called reducers and they'll do that within this reducers folder and create just an index that just file

44
00:04:09,210 --> 00:04:14,880
within it here we'll also need to import our action types from our actions folder in the types file

45
00:04:16,010 --> 00:04:23,220
and the first reducer function that will create will be called user reducer because it will reduce all

46
00:04:23,220 --> 00:04:26,430
of the user related data.

47
00:04:26,460 --> 00:04:33,930
It'll take a state argument as well as the action that's coming in and within the body will set up a

48
00:04:33,930 --> 00:04:41,340
switch statement where it will update state accordingly depending upon the type of action that's coming

49
00:04:41,340 --> 00:04:41,700
in.

50
00:04:41,700 --> 00:04:44,640
As we set with that type variable.

51
00:04:44,640 --> 00:04:52,620
So in the case that this is a set user action the type of set user We're going to want to update state

52
00:04:54,080 --> 00:05:01,500
where we first take the current user data that's coming from action that payload that current user the

53
00:05:01,560 --> 00:05:07,020
user data that we put on the current user property in our set user action.

54
00:05:07,200 --> 00:05:16,660
And we also want to set the property is loading to false which will create on our state.

55
00:05:16,870 --> 00:05:21,970
And we also need to set up a default case in every reducer where if it doesn't match a given action

56
00:05:21,970 --> 00:05:31,570
type all it's going to do is just return the state as it was and to state the state parameter we're

57
00:05:31,570 --> 00:05:35,560
going to set a default value of initial user state.

58
00:05:35,650 --> 00:05:41,320
So this is what our users say it will look like without any changes we'll create this as an object just

59
00:05:41,320 --> 00:05:49,570
above our producer or our current user will be set to nil and is loading will be set to true by default.

60
00:05:49,570 --> 00:05:54,040
Now we want our reduced functions to only operate on a certain part of state.

61
00:05:54,040 --> 00:06:01,380
For example our user reducer should only modify our user property on the global state.

62
00:06:01,600 --> 00:06:08,560
So create this variable called Root reducer and all it will use a function which will import from Redus

63
00:06:08,650 --> 00:06:16,150
called combine reducers and combine reducers will allow us to determine what property on global state

64
00:06:16,470 --> 00:06:25,320
a given reducer updates will include combine reducers and within the object that it takes we can determine

65
00:06:25,320 --> 00:06:34,930
that user producer will be updating and put it state values on this user property.

66
00:06:35,110 --> 00:06:39,610
And now once we have that we can export default this route reduce our variable

67
00:06:42,370 --> 00:06:54,280
and or place our empty function within create store with reproducer to get our entire state object and

68
00:06:54,290 --> 00:07:00,420
will make sure to import route reducer from the reducers folder will save all of our files and if we

69
00:07:00,420 --> 00:07:05,450
refresh our app we take a look at our redux that toes and click on the state option.

70
00:07:05,550 --> 00:07:11,490
You can see we have this one property of user and on the property current user property as well as is

71
00:07:11,490 --> 00:07:15,690
loading.

72
00:07:15,780 --> 00:07:22,290
So he successfully set up our first action action type and reducer in order to set our user data on

73
00:07:22,290 --> 00:07:27,120
global say with the set user action will need the connect function from re-act redux.

74
00:07:27,120 --> 00:07:33,910
And as the name implies connect allows to connect or read ex-state actions with a given re-act component.

75
00:07:34,020 --> 00:07:41,040
So wrap route with Connect to execute it in a set of parentheses before wrapping route we have access

76
00:07:41,040 --> 00:07:45,540
to first the global stays with the map state to prop's argument.

77
00:07:45,660 --> 00:07:52,200
But we dont need any state so just pass in now and then we have this map dispatched to prop's argument

78
00:07:52,380 --> 00:07:53,660
as the second argument.

79
00:07:53,790 --> 00:07:59,730
And this is where we'll get our actions then all we need to do to get set user is to structure it from

80
00:07:59,730 --> 00:08:02,470
the map dispatch to prop's object.

81
00:08:02,520 --> 00:08:09,560
So all these structures say user and will import set user from the index file of the actions folder

82
00:08:10,950 --> 00:08:16,830
and what connect and map does best to prop's will do is it will take this set user action and put it

83
00:08:16,830 --> 00:08:20,540
on our prop's object of the component that we're wrapping with CONNECT.

84
00:08:20,790 --> 00:08:23,540
So now so that user will be on this.

85
00:08:23,600 --> 00:08:24,570
Got props.

86
00:08:27,160 --> 00:08:28,990
If we save our index file

87
00:08:31,940 --> 00:08:39,640
on our page reloads will execute the user action and our current user property on the user object is

88
00:08:39,670 --> 00:08:43,690
updated to the value that we're getting from our on changed.

89
00:08:43,900 --> 00:08:44,470
Listener.

