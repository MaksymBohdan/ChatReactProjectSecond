1
00:00:00,620 --> 00:00:05,220
We have improved our register form by adding error handling and form validation.

2
00:00:05,460 --> 00:00:10,860
But there's a couple of small areas to take note of when you try to register with a new user.

3
00:00:10,860 --> 00:00:17,550
It's possible to hit submit twice and as a result our users registered but we get in there and we're

4
00:00:17,550 --> 00:00:24,740
also not clearing any errors when we have a successful registration to fix both of these errors.

5
00:00:24,750 --> 00:00:32,790
We'll head back up to handle submit or roll first move event up prevent default above the one valid

6
00:00:32,790 --> 00:00:34,880
conditional.

7
00:00:35,070 --> 00:00:38,020
And before we reach out to firebase we're going to set the stage.

8
00:00:38,070 --> 00:00:39,860
We're going to clear the air.

9
00:00:40,120 --> 00:00:43,360
And we're going to set a loading property to True.

10
00:00:43,380 --> 00:00:48,810
Now we haven't created this looting property yet so we'll do that within our state object.

11
00:00:49,170 --> 00:00:55,220
Loading will initially be set to false and will set it to true only when we're in the process of registering

12
00:00:55,220 --> 00:00:59,020
a user and under the then part of our promise.

13
00:00:59,250 --> 00:01:03,180
We're going to set loading back to false.

14
00:01:04,060 --> 00:01:10,380
And if we have any errors in the catch part we'll set loading to post there as well since our promises

15
00:01:10,390 --> 00:01:19,900
resolved although unsuccessfully and here we can also set our errors object or heir's array and concatenate

16
00:01:19,900 --> 00:01:22,480
the air that we're getting onto it.

17
00:01:22,480 --> 00:01:26,060
Now with the structure or loading property from state within render.

18
00:01:26,790 --> 00:01:28,820
And head down to our submit button.

19
00:01:29,130 --> 00:01:33,220
We first want to set the class the button according to the loading value.

20
00:01:33,270 --> 00:01:39,630
So we'll give the class name value a ternary Riddel check to see if loading said to true.

21
00:01:39,630 --> 00:01:45,300
If so we'll give it class of loading which will put a loading spin on within the button will also give

22
00:01:45,300 --> 00:01:51,390
it the disabled prop where if loading is true or button will be disabled and the user in the process

23
00:01:51,390 --> 00:01:54,740
of being registered won't be able to click on the submit button twice.

24
00:01:57,810 --> 00:02:00,120
Now if we head back to our form and we have an error

25
00:02:05,250 --> 00:02:07,290
for example our password is invalid.

26
00:02:09,460 --> 00:02:15,910
If we fill this out correctly and hit submit again we can see that our errors cleared or button is disabled

27
00:02:15,910 --> 00:02:17,390
and we see our loading spinner.

28
00:02:17,680 --> 00:02:24,390
And now you see our new user information and of course if we hit submit again we get our air from firebase

29
00:02:24,580 --> 00:02:32,920
But now that error is put within our error message to Additionally if an error is coming from incorrectly

30
00:02:32,920 --> 00:02:38,720
filling out a given input we can give that input and error class error silent.

31
00:02:38,860 --> 00:02:41,410
We'll do that in the class named Propp.

32
00:02:41,540 --> 00:02:49,030
We will iterate over all the errors using the or a method and for each error element will take the message

33
00:02:49,030 --> 00:02:54,600
property of the error object and convert the text to lowercase just to normalize it.

34
00:02:54,790 --> 00:03:05,340
And we'll see using the includes method whether the text for the error includes the name of the input.

35
00:03:05,350 --> 00:03:09,350
So in this case to see if it includes the text email.

36
00:03:09,520 --> 00:03:13,150
If so we'll give it an air A-Class.

37
00:03:13,380 --> 00:03:16,420
Otherwise we won't give it any class.

38
00:03:16,500 --> 00:03:21,870
This provides a nice visual indication for our user about where the error is coming from what they need

39
00:03:21,870 --> 00:03:22,850
to change.

40
00:03:22,860 --> 00:03:28,890
So if we try to register a new user but supply and email address that's associated with an already registered

41
00:03:28,890 --> 00:03:31,430
user you'll get an error about it.

42
00:03:31,440 --> 00:03:36,540
Now I can see visually our e-mail inputs red indicating that something is wrong with it.

43
00:03:38,580 --> 00:03:42,770
And we can apply this to our other inputs as well.

44
00:03:45,340 --> 00:03:55,510
Well in order to make this a bit easier we'll create this handle input error function and this function

45
00:03:55,510 --> 00:03:56,770
will take a couple of things.

46
00:03:56,780 --> 00:04:05,580
First the errors array and then the input name the name of the input that we're on we can grab all of

47
00:04:05,580 --> 00:04:11,750
the code that we had to determine the class name for our e-mail input.

48
00:04:13,690 --> 00:04:16,830
And just replace that with a call to handle input error.

49
00:04:16,890 --> 00:04:24,770
We passed down the errors array and the name of the input email as a string.

50
00:04:25,030 --> 00:04:32,380
And now we can paste all that we copied with and handle input air and make sure that we return the class

51
00:04:34,860 --> 00:04:41,300
based on the value that it computes and instead of checking to see whether this error messages includes

52
00:04:41,310 --> 00:04:50,020
just e-mail will pass and the input name parameter to it.

53
00:04:50,110 --> 00:04:59,260
Now we can call this function for the class names of both password and password confirmation.

54
00:04:59,320 --> 00:05:04,060
We'll give both of them an input name of password.

55
00:05:04,090 --> 00:05:10,170
We could also do the same for the username if you like if you're creating any username specific errors

56
00:05:14,780 --> 00:05:16,100
to test this out.

57
00:05:16,320 --> 00:05:23,940
We'll try registering a new user but whose password password confirmation values aren't the same.

58
00:05:23,980 --> 00:05:30,280
We hit submit we see our password is invalid and both of our password inputs are highlighted red to

59
00:05:30,280 --> 00:05:32,250
indicate an error with them.

