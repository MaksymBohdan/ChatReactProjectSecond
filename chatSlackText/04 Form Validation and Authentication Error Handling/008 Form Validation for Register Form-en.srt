1
00:00:00,870 --> 00:00:06,500
If we don't feel in any of the inputs on our register form but still hit the submit button we're constantly

2
00:00:06,500 --> 00:00:09,700
going there from firebase and we shouldn't allow this to happen.

3
00:00:09,700 --> 00:00:16,870
We should be able to send the form data through our back and without first making sure that all the

4
00:00:16,870 --> 00:00:18,190
fields are filled out.

5
00:00:19,520 --> 00:00:25,100
So some form validation within Hammill submit by adding a conditional where we call the function is

6
00:00:25,100 --> 00:00:33,230
form valid and only if the form is valid will we allow the data to be sent off to firebase from the

7
00:00:33,230 --> 00:00:34,160
form.

8
00:00:34,220 --> 00:00:38,170
So create This is for a valid function and I'll check for a couple of things.

9
00:00:38,180 --> 00:00:43,250
First we'll execute a function called is forment to make sure all of our inputs are filled out.

10
00:00:43,430 --> 00:00:45,880
If not we'll throw an error.

11
00:00:45,890 --> 00:00:49,040
Otherwise we'll check to make sure our passwords are valid.

12
00:00:49,500 --> 00:00:57,150
And if that's not the case we'll throw an error in that event to.

13
00:00:57,350 --> 00:01:06,020
But if both of these conditions are met well say that our form is valid and return true allowing our

14
00:01:06,020 --> 00:01:12,620
form data to be sent off to firebase we'll first create this form empty function

15
00:01:15,940 --> 00:01:22,150
and within is form empty which will create underneath is form valid wants to take each of the input

16
00:01:22,270 --> 00:01:29,360
values that are stored within our state object we can pass in where we call is form empty entire state

17
00:01:29,360 --> 00:01:30,340
object.

18
00:01:30,530 --> 00:01:36,560
And then within the parameters the structure using object is structuring each of the individual values

19
00:01:36,680 --> 00:01:43,210
for our inputs and check to make sure that there is a value provided to each of them.

20
00:01:43,340 --> 00:01:50,690
We'll do that with a conditional where it'll take the length of the value that was typed in and turn

21
00:01:50,690 --> 00:01:52,850
it into its opposite boolean value.

22
00:01:53,120 --> 00:02:00,710
So if we have a length of zero for any one of these inputs we will return from this function true indicating

23
00:02:00,710 --> 00:02:03,050
that our form is not entirely filled out.

24
00:02:03,870 --> 00:02:12,370
And to throw an error when we return true or more is form empty function within is 1 valid will create

25
00:02:12,850 --> 00:02:18,070
a variable called errors that are equal to an empty array and an error variable

26
00:02:21,150 --> 00:02:29,330
will assign our air variable to an object with a property of message with the text fill in all fields.

27
00:02:32,190 --> 00:02:41,340
And we want to set the state to put that error on an errors array within state or add that property

28
00:02:41,880 --> 00:02:42,840
to our state object

29
00:02:46,600 --> 00:02:52,980
and update that by taking the errors the empty errors array and concatenating the error object that

30
00:02:53,020 --> 00:02:54,050
we just created.

31
00:02:55,040 --> 00:03:04,970
And then we want to return false indicating that we should not execute handles submit.

32
00:03:05,230 --> 00:03:07,170
Then let's create a function.

33
00:03:07,180 --> 00:03:09,210
I will check to see if our passwords are valid.

34
00:03:11,900 --> 00:03:18,740
Who also passed the state object to is password valid but instead of destructuring all the values of

35
00:03:18,740 --> 00:03:24,970
the input values will just grab password and password confirmation.

36
00:03:25,030 --> 00:03:30,460
And here we first want to check the length of both of these values

37
00:03:34,010 --> 00:03:40,520
if either password or password confirmation have a length of less than 6.

38
00:03:40,680 --> 00:03:45,580
We're going to return false indicating that our passwords aren't valid so the passwords that we provide

39
00:03:45,580 --> 00:03:49,470
to the forum need to be at least six characters in length.

40
00:03:49,480 --> 00:03:54,640
We also want to check to make sure that our password and password confirmation values are the same.

41
00:03:56,730 --> 00:04:03,440
Otherwise we return true if both of those conditions are met and then to cover the error case for a

42
00:04:03,450 --> 00:04:05,700
password isn't valid.

43
00:04:06,120 --> 00:04:13,650
We'll assign the variable to an object the property of message and the text of password is invalid.

44
00:04:13,650 --> 00:04:19,590
And once again set the state where we set the errors array in state and concatenate error on onto our

45
00:04:20,010 --> 00:04:23,810
errors array and return false at the end of that as well.

46
00:04:27,990 --> 00:04:33,260
Now we can save our changes and test this out test out our validation.

47
00:04:33,260 --> 00:04:36,950
If we had to submit I don't see any firebase err on the console anymore.

48
00:04:38,370 --> 00:04:46,510
We'll head to our reactive tools and navigate to our register component pull up the state in our air.

49
00:04:46,580 --> 00:04:50,030
We see that we have one new element.

50
00:04:50,420 --> 00:04:56,080
It's an object with a message of fill in all fields.

51
00:04:56,200 --> 00:05:02,040
And now if we fill in the entire form but our password confirmation doesn't match our password we get

52
00:05:02,040 --> 00:05:04,440
the error message password is invalid.

53
00:05:07,620 --> 00:05:15,070
And also if our passwords match but they're both too short we get the same error message we don't fill

54
00:05:15,070 --> 00:05:18,590
out all the fields we get fill in all fields again.

55
00:05:18,790 --> 00:05:22,790
So it looks like our form validation is working well.

56
00:05:22,840 --> 00:05:27,610
Finally we want to display any errors from our form validation to our user so they know what's going

57
00:05:27,610 --> 00:05:32,590
wrong and sending off the form will create a function called display errors to do that.

58
00:05:32,590 --> 00:05:35,450
It'll take the errors or say that we haven't stay.

59
00:05:35,740 --> 00:05:41,410
We use the map method to map over those errors or take the error value as well as the index of the element

60
00:05:41,410 --> 00:05:44,480
that we're iterating over and return a set of tags.

61
00:05:44,530 --> 00:05:50,170
Put the key prop on the opening tag set equal to the index and we'll show them the message with the

62
00:05:50,170 --> 00:06:02,050
interpolated value error message so underneath our form component we're going to display any errors

63
00:06:02,950 --> 00:06:07,740
first by checking to see that we have some errors within our errors.

64
00:06:08,830 --> 00:06:11,460
Make sure that the length of the error is greater than zero.

65
00:06:11,590 --> 00:06:18,070
If that's the case we're going to show our user a message component with this ere prompt to give it

66
00:06:18,070 --> 00:06:20,740
some air styling within it.

67
00:06:20,740 --> 00:06:27,430
They'll be an age three the text of air then we'll call our display arrows function underneath where

68
00:06:27,430 --> 00:06:30,830
we'll pass in the air xray from St..

69
00:06:31,480 --> 00:06:41,790
Now if we do structure errors from stay within our render we can make the path of this a bit shorter.

70
00:06:41,790 --> 00:06:47,900
Or you can just check to see that airs at length is greater than zero and pasand errors to display errors.

71
00:06:47,970 --> 00:06:52,540
We'll save that head back to our app.

72
00:06:52,860 --> 00:06:53,550
We hit submit.

73
00:06:53,550 --> 00:06:57,830
We can see our air message underneath telling us to fill in all the fields

74
00:07:00,820 --> 00:07:05,610
and if we fill in our form such that our password and password confirmations don't match.

75
00:07:05,710 --> 00:07:07,510
We'll also get our password air.

