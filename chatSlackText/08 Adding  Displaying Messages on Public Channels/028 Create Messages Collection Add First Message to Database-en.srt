1
00:00:00,180 --> 00:00:05,640
Your database will have messages collection for every new message that's added collection will be called

2
00:00:05,640 --> 00:00:13,590
messages you will have as a child the channel ID that the message is written on and then that will have

3
00:00:13,590 --> 00:00:20,640
a child of the message ID unique identifier of the message that's created in on this ID will have information

4
00:00:20,640 --> 00:00:23,290
about the message namely the content of the message.

5
00:00:23,310 --> 00:00:29,430
For example the text flow world the time stamp which is when the message was created as well as a user

6
00:00:29,430 --> 00:00:38,350
object which will contain information about the user that created the message their ID their name and

7
00:00:38,350 --> 00:00:39,420
their avatar

8
00:00:44,610 --> 00:00:47,710
and we can add this example collection.

9
00:00:47,730 --> 00:00:52,260
Take a look at what our messages collection might look like.

10
00:00:53,260 --> 00:00:59,110
Rechanneled ID will have an array of messages that are added on the messages collection will have an

11
00:00:59,110 --> 00:01:03,370
array of channel IDs for all the channels in our app.

12
00:01:03,700 --> 00:01:06,360
We'll delete that and back to our messages component

13
00:01:11,410 --> 00:01:13,640
and we'll first bring in firebase.

14
00:01:13,770 --> 00:01:18,300
So import firebase from two levels of

15
00:01:22,910 --> 00:01:29,580
nor create the messages for the ref to put messages on our messages collection.

16
00:01:29,580 --> 00:01:37,070
So put that in state as firebase our database that but the string of messages and want to pass this

17
00:01:37,070 --> 00:01:46,910
down to our message form via prop's so create a messages ref Propp and use the render function to restructure

18
00:01:47,690 --> 00:01:49,400
our messages ref property from state

19
00:01:52,730 --> 00:01:54,830
and pass that down.

20
00:01:54,900 --> 00:02:01,700
And the reason for this is that we'll be creating our messages within the messages message form the

21
00:02:01,720 --> 00:02:09,230
first within message form also create a state object which will hold the message.

22
00:02:09,320 --> 00:02:14,600
It will have a property name of a message set to an empty string for now and will create an onchange

23
00:02:15,200 --> 00:02:22,790
on the input to update that message property connected to handle change and this handle change functional

24
00:02:22,790 --> 00:02:33,100
take the event so the state according to the name of the input and give it give the corresponding property

25
00:02:33,640 --> 00:02:41,040
within state its value the value that is typed into the input and on the button on our ad reply button

26
00:02:41,100 --> 00:02:48,380
we're going to add an on quick Hamburgh connected to a send message function.

27
00:02:48,630 --> 00:03:01,840
We'll create send message and our first restructure from props are messages ref which we need to use

28
00:03:01,840 --> 00:03:04,940
in order to create a message in our database.

29
00:03:05,100 --> 00:03:07,070
We'll check to see if there's a message.

30
00:03:07,080 --> 00:03:17,440
And only then will we send the message to will the structure from state or message property which holds

31
00:03:17,440 --> 00:03:19,030
the content of our message.

32
00:03:19,800 --> 00:03:22,570
And if there's a message we'll take the messages.

33
00:03:22,620 --> 00:03:27,840
And actually before using that we'll set the state will set a voting property on state to true.

34
00:03:27,900 --> 00:03:35,630
So add loading in our state initialize it to False take the message is.

35
00:03:35,860 --> 00:03:42,470
You know we need to provide the channel ID as a child to specify which channel we're adding this message

36
00:03:42,470 --> 00:03:44,410
to.

37
00:03:44,420 --> 00:03:51,080
So to get that information we need to go back to our app file and pass it down to our messages component.

38
00:03:51,650 --> 00:03:58,100
So we use map C to process to get our current channel from state channel that current channel

39
00:04:02,260 --> 00:04:11,590
structure it and our prop's object or app and pass it down as a prompt to messages with the same name

40
00:04:17,070 --> 00:04:21,270
Additionally it's important to know that when we're passing props in multiple components we need to

41
00:04:21,270 --> 00:04:23,600
provide a unique identifier a key.

42
00:04:23,820 --> 00:04:30,810
So to give our component the key word to be rendered properly will give it the current channel Id

43
00:04:33,550 --> 00:04:39,730
say if there's a current channel we'll give our messages component the key of her channel that ID and

44
00:04:39,730 --> 00:04:44,980
we'll do something similar for our side panel we'll give it a key value according to the current user

45
00:04:45,100 --> 00:04:50,280
value we're passing in its unique identifier.

46
00:04:50,350 --> 00:04:54,810
That's an important step in passing down props this way.

47
00:04:55,600 --> 00:05:00,910
And now since we're passing down our current channel Propp to our messages component we can receive

48
00:05:00,910 --> 00:05:10,180
it in our state object as Channel or the structure channel from state and render and pass that down

49
00:05:10,180 --> 00:05:14,020
to message form as print channel.

50
00:05:14,020 --> 00:05:14,560
Once again

51
00:05:18,820 --> 00:05:20,470
then within its state

52
00:05:23,790 --> 00:05:31,590
we can optionally receive it as channel from this stuff perhaps a channel.

53
00:05:31,640 --> 00:05:40,550
Now we can do structure within and message channel from state and provide the child channel ID to get

54
00:05:40,550 --> 00:05:41,720
the channel that we're on.

55
00:05:41,750 --> 00:05:47,750
The idea of the channel we're on or push that onto the messages rather than set

56
00:05:50,960 --> 00:05:52,910
a given message onto it.

57
00:05:53,010 --> 00:05:55,920
Then how do we get that message.

58
00:05:55,920 --> 00:06:00,840
Well we'll execute a function called create message to do the work for us.

59
00:06:02,450 --> 00:06:09,080
Or create a message above our Send message function.

60
00:06:09,110 --> 00:06:16,540
This will create an object to the variable message for us to have our content property

61
00:06:19,650 --> 00:06:24,850
we get this from the message property in St..

62
00:06:24,920 --> 00:06:30,750
And we also need a time stamp with the time stamp of when this message was created.

63
00:06:30,920 --> 00:06:36,700
Because from the path firebase that database got server value that time stamp.

64
00:06:36,700 --> 00:06:43,020
This is going to be received from firebase when our new message is added so we need to import firebase

65
00:06:44,020 --> 00:06:46,020
from two levels up again in order to get that

66
00:06:49,640 --> 00:06:56,660
then we have our user object you know contain three properties an ID.

67
00:06:56,980 --> 00:07:02,830
So we need to also pass in our current user to our messages component the props

68
00:07:06,170 --> 00:07:16,810
and then then messages receive that in our state as the user property and restructure it and pass it

69
00:07:16,810 --> 00:07:22,130
down again to our message form as the Propp current user

70
00:07:27,350 --> 00:07:28,400
will add user.

71
00:07:28,570 --> 00:07:30,230
And our message form state as well.

72
00:07:30,250 --> 00:07:32,200
This stuff prop's that current user

73
00:07:37,270 --> 00:07:43,630
and then down within our user object will set the ID to this start state that user id the name will

74
00:07:43,630 --> 00:07:53,270
be the start state user dot display name the Avatar does not state that user dot photo euro to get all

75
00:07:53,270 --> 00:07:59,150
that user information about who created the message and we're going to return the message and pass it

76
00:07:59,150 --> 00:08:04,420
to our set method then we're going to I don't know then statement

77
00:08:08,520 --> 00:08:09,450
will set the stage.

78
00:08:11,160 --> 00:08:12,300
Well that loading the false

79
00:08:16,430 --> 00:08:18,430
will set the message to an empty string.

80
00:08:21,200 --> 00:08:27,830
We also want to set and heir's property to an empty array so we want to track our errors any errors

81
00:08:27,830 --> 00:08:29,520
that might take place in executing this.

82
00:08:29,520 --> 00:08:41,190
So out there is property to state to catch the very end or will cancel error our error message if we

83
00:08:41,190 --> 00:08:50,070
have one and we'll set the state or set the first loading property of state to false.

84
00:08:50,230 --> 00:09:00,440
Once this is resolved that airs this state that errs and concatenate our air object onto it.

85
00:09:05,570 --> 00:09:06,210
Otherwise.

86
00:09:06,230 --> 00:09:08,300
Now that does handle the if condition.

87
00:09:08,300 --> 00:09:11,300
If we do have a message if we don't have a message we're going to.

88
00:09:11,460 --> 00:09:20,180
So the states are going to add an error to our heirs are they going to concatenate an object with a

89
00:09:20,180 --> 00:09:22,250
message property of add a message

90
00:09:27,580 --> 00:09:31,890
and on our input we can show this error.

91
00:09:32,260 --> 00:09:39,450
We are the class name again with the structure from state within render

92
00:09:42,410 --> 00:09:44,390
the arrows object the arrows array.

93
00:09:44,390 --> 00:09:57,620
I should say I will use the some array method so if one of the elements in the arrows array includes

94
00:10:02,580 --> 00:10:07,890
the text of message just like we supplied in our error message in our L's case.

95
00:10:08,380 --> 00:10:12,310
If Erda message includes a text message we're going to show the error class.

96
00:10:12,310 --> 00:10:14,390
Otherwise we'll show nothing.

97
00:10:19,390 --> 00:10:22,780
Now if we save all the open our console

98
00:10:27,580 --> 00:10:32,290
we had to react dev tools.

99
00:10:32,410 --> 00:10:38,290
We go to our message form and take a look at our state.

100
00:10:38,390 --> 00:10:42,730
Looks like we're saving our user and our channel so we have values for both of those

101
00:10:45,570 --> 00:10:48,870
so we can get ad reply.

102
00:10:48,870 --> 00:10:58,570
We get our air added to our ears re and state and we see our red outline now.

103
00:10:58,580 --> 00:11:03,600
Try adding a message of hello world we see after adding it.

104
00:11:03,880 --> 00:11:10,480
Our message was set to an empty string within state and we now have a messages collection in our database

105
00:11:10,930 --> 00:11:18,180
with one message with the content of hello world as well as all of our user information and our time

106
00:11:18,180 --> 00:11:19,740
stamp for when it was created.

