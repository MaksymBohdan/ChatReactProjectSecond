1
00:00:00,480 --> 00:00:06,900
Now part of the last step we want to display all the top posters for a given channel all of the individuals

2
00:00:06,900 --> 00:00:10,840
who posted the most in a given channel.

3
00:00:11,610 --> 00:00:22,110
So back in our messages component we're going to head up to the ad message listener function and execute

4
00:00:22,890 --> 00:00:25,920
a new function that will create called Count user posts.

5
00:00:25,950 --> 00:00:27,510
And I'll take all the loaded messages

6
00:00:30,780 --> 00:00:38,060
we can ABA's new function anywhere but all down to count unique users and add count user posts underneath.

7
00:00:38,130 --> 00:00:40,600
So can't use a purse.

8
00:00:40,730 --> 00:00:44,230
We'll take the accumulated array of messages.

9
00:00:44,450 --> 00:00:50,000
Priest channel will create a variable called user post which will store the return value of iterating

10
00:00:50,000 --> 00:00:55,310
over this messages or a with the reduce method and the accumulator for Reduce will be initially set

11
00:00:55,310 --> 00:00:58,830
to an empty object not an empty array.

12
00:00:59,090 --> 00:01:00,940
Will loop over every message.

13
00:01:00,950 --> 00:01:07,520
We'll first check to see then the body of produce whether there is a property on the accumulated object

14
00:01:08,060 --> 00:01:12,840
with the name of the current message username.

15
00:01:12,850 --> 00:01:20,100
If so we're going to take the object that this using named property is set equal to and increment its

16
00:01:20,110 --> 00:01:23,290
Count property by 1.

17
00:01:23,590 --> 00:01:34,150
Otherwise we're going to add a new object onto the accumulated object the property name of the username

18
00:01:34,210 --> 00:01:35,540
who created the message.

19
00:01:35,740 --> 00:01:41,120
And this will have a property of Avatar the user's avatar as well as a count of 1.

20
00:01:41,140 --> 00:01:47,650
Since this is the first time finding a message with the given username and then at the end will return

21
00:01:47,650 --> 00:01:57,650
the accumulator and then we want to log the object that stored within user posts.

22
00:01:57,700 --> 00:02:03,670
So if we take a look at our console after the page loads we can see the change that we're currently

23
00:02:03,670 --> 00:02:04,140
on.

24
00:02:04,150 --> 00:02:12,980
We get an object with a number of properties each set equal to a username with an avatar value and a

25
00:02:12,980 --> 00:02:20,050
count value set equal to the count of messages they've added to a given channel.

26
00:02:20,140 --> 00:02:26,710
So this is what all use within the metal panel to display the top posters but instead of just logging

27
00:02:26,710 --> 00:02:33,970
this object we want to put it on global state so the Metapad can make can make use of it so won't create

28
00:02:33,970 --> 00:02:37,590
a new action which will execute called set user post.

29
00:02:37,590 --> 00:02:44,340
It will take that user post object will create the type for it within the types file called set user

30
00:02:44,340 --> 00:02:47,900
posts that will be equal to a string in the same name.

31
00:02:49,520 --> 00:02:56,290
And now to create a function in the index file of our actions folder.

32
00:02:56,340 --> 00:02:58,280
Once again this will be called to user post.

33
00:02:58,290 --> 00:03:05,910
It will take some user post data and it's going to return an object first with the type from action

34
00:03:05,910 --> 00:03:14,980
types that say user posts and then the payload and it'll have just the property name of user posts with

35
00:03:16,860 --> 00:03:23,880
the value of user posts then within our reducers folder we're going to add another property to initial

36
00:03:23,880 --> 00:03:25,170
channel state.

37
00:03:25,170 --> 00:03:33,990
User posts set equal to no initially will add a new case to a channel reducer of action types that set

38
00:03:34,000 --> 00:03:37,520
user posts where will return an object.

39
00:03:37,550 --> 00:03:45,370
Are we spread all of the initial values of state and update only the user posts property to action not

40
00:03:45,370 --> 00:03:46,890
Pallo the user posts.

41
00:03:50,620 --> 00:03:56,120
So now we can make use of this new action on our products object.

42
00:03:56,770 --> 00:04:04,700
But to put it there for our messages component we need to grab the connect function from reactors X

43
00:04:09,700 --> 00:04:12,640
and or import our action site user post

44
00:04:21,460 --> 00:04:25,540
you know down to the bottom to execute our connect function

45
00:04:29,590 --> 00:04:33,300
to make our new action available within the messages component.

46
00:04:35,590 --> 00:04:42,450
So malmsey to prop's will be said to know and will plucker site user post from app dispatched approx.

47
00:04:42,490 --> 00:04:43,930
We'll save all of our files.

48
00:04:45,640 --> 00:04:50,780
And back to our app if we take a look at our redux tools

49
00:04:54,490 --> 00:05:02,060
we take a look at our channel property of say we should see an updated user posts property containing

50
00:05:02,060 --> 00:05:07,650
all the values that we had before logged to our consul.

51
00:05:07,680 --> 00:05:13,880
Now that we're putting our user posts object on global state going to head to after J us and use maps

52
00:05:14,010 --> 00:05:22,280
to props to get the current value of user post from state that channel that user posts and pass it down

53
00:05:24,050 --> 00:05:30,600
once again by structuring user posts from the app prop's down to the metal panel component.

54
00:05:35,150 --> 00:05:39,780
So now head to our panel and we'll

55
00:05:43,990 --> 00:05:46,960
receivers directly from prop's instead of putting it on state

56
00:05:49,850 --> 00:05:58,470
or pluck user posts off from the prop's object then we head down to recording content per our top posters

57
00:05:58,470 --> 00:06:03,340
area or first check to make sure that we have a value for user posts.

58
00:06:03,660 --> 00:06:08,700
And if so it will execute a function called display top posters which will pass the user posts object

59
00:06:08,700 --> 00:06:11,880
to will create this new function above or render

60
00:06:15,570 --> 00:06:23,280
so display top posters will take the posts and to make this object easier to work with will use the

61
00:06:23,280 --> 00:06:30,400
function object that entries so except our post object that we're passing to it.

62
00:06:30,610 --> 00:06:34,020
And just to display how object or entries works.

63
00:06:35,920 --> 00:06:44,790
Well create a simple object stored by the variable a couple of properties object that entries does is

64
00:06:44,820 --> 00:06:51,650
it will take this object and convert both the key for an object as always its value to its own array

65
00:06:51,660 --> 00:06:54,170
and put that within an array.

66
00:06:54,300 --> 00:06:59,620
So in the end when we pass an object to object all the entries will have an array of arrays.

67
00:06:59,910 --> 00:07:07,080
So we can use any array method we like with the first array method that we can make use of is sort so

68
00:07:07,080 --> 00:07:10,430
sort takes a function with premolars and B.

69
00:07:10,800 --> 00:07:19,350
And if we take B of the index of 1 minus a or the index of 1 we can compare the count value of each

70
00:07:19,350 --> 00:07:26,320
of the top posters and show them in descending order from Greatest count of post to kind of post.

71
00:07:26,330 --> 00:07:32,100
Then we can use the map method and within the parameters of map we can restructure the key and value

72
00:07:32,490 --> 00:07:34,170
for each of the elements of the array

73
00:07:37,020 --> 00:07:44,170
and then use them in the markup that will output in order to display all of our top posters.

74
00:07:44,200 --> 00:07:49,110
So the component that we need is the list component from semantic UI

75
00:07:52,380 --> 00:08:01,920
and will actually wrap our conditional are we have user posts and our display top posters function in

76
00:08:01,920 --> 00:08:02,690
a list component

77
00:08:05,980 --> 00:08:13,870
and then back within display top posters will iterate over the list item.

78
00:08:13,880 --> 00:08:22,880
So the key props for the list item will be set to the index of the current element for iterating over

79
00:08:23,100 --> 00:08:30,890
so we can also grab the index even though where destruction can value when the parameters of MT and

80
00:08:30,910 --> 00:08:33,460
within the list item will add an image component.

81
00:08:33,460 --> 00:08:36,280
The prop of Avatar and a source of Baldauf Avatar

82
00:08:39,000 --> 00:08:51,310
will have a list content component within that would be a list Hetter will make that as an ATAC the

83
00:08:51,310 --> 00:08:53,110
content of key.

84
00:08:53,670 --> 00:09:03,850
So the key will be the name of the top poster and then a list description with value Valder account

85
00:09:04,580 --> 00:09:11,320
and the text of posts to get the total count of posts that they've added to a given channel.

86
00:09:11,380 --> 00:09:17,390
If we take a look at that you can see a given user their name their avatar and the number of posts they've

87
00:09:17,390 --> 00:09:18,530
contributed.

88
00:09:18,560 --> 00:09:20,690
We switch to a different channel.

89
00:09:20,690 --> 00:09:27,860
We can see we just have one poster here since there is only one user who's added post to this re-act

90
00:09:27,860 --> 00:09:30,550
channel.

91
00:09:30,930 --> 00:09:37,780
And then finally at the end if we want to limit the number of top posters to a specific amount we can

92
00:09:37,780 --> 00:09:45,700
use the slice method and say get only the first five top poster say if we have more than five elements

93
00:09:45,700 --> 00:09:48,410
within our array.

94
00:09:48,630 --> 00:09:56,790
And lastly if we want to handle the case that we're incorrectly formatting this post value if sometimes

95
00:09:56,790 --> 00:09:59,240
we need to provide the text of post.

96
00:09:59,400 --> 00:10:05,880
If the number of posts is singular or plural if there's multiple posts or zero we can create this format

97
00:10:05,880 --> 00:10:13,530
count function which takes the Valder count amount and we'll first check to see if the number that it

98
00:10:13,530 --> 00:10:15,980
takes is greater than 1 or equal to zero.

99
00:10:16,050 --> 00:10:19,780
If so you want to use post plural.

100
00:10:19,800 --> 00:10:26,670
Otherwise post singular for the text.

101
00:10:26,710 --> 00:10:34,390
Now if we take a look at top posters and see that we have multiple for a given user it's plural and

102
00:10:34,390 --> 00:10:36,120
if we just have one post it's singular.

